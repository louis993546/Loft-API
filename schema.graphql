# scalar Date   #TODO: find out how it will be (de)serialize
scalar UUID

type Member {
  id: UUID!
  name: String!
  # approvedAt:
  approvedBy: Member
}

enum TaskState {
  NOT_DONE
  DONE
}

type Task {
  id: UUID!
  title: String!
  state: TaskState!
  # createdAt
  creator: Member!
  Assignee: Member
  # dueAt
}

type Event {
  id: UUID!
  title: String!
  creator: Member!
  # createdAt
  # startTime
  # endTime
}

enum NoteFormat {
  COMMON_MARK
}

type Note {
  id: UUID!
  creator: Member!,
  # createdAt: 
  format: NoteFormat!,
  content: String!
}

type JoinRequest {
  id: UUID!
  name: String!
  message: String!
  # createdAt:
}

type Loft {
  id: UUID!
  name: String!
  joinCode: String!
  # createdAt:
  membersCount: Int!
  members: [Member!]!
  tasksCount: Int!
  tasks: [Task!]!
  eventsCount: Int!
  events: [Event!]!
  notes: [Note!]!
  notesCount: Int!
  joinRequestsCount: Int!
  joinRequests: [JoinRequest!]!
}

type LoftAndFirstMember {
  loft: Loft!
  firstMember: Member!
}

type Echo {
  time: String!
  format: String!
}

type Query {
  lofts: [Loft!]!   # for testing only, should not exist in production version
  loft(id: UUID!): Loft
  echo: Echo!
}

input NewTask {
  title: String!
  loftId: UUID!
}

input NewEvent {
  name: String!
  loftId: UUID!
}

input NewRequest {
  name: String!
  message: String!
  loftId: UUID!
}

input NewLoft {
  name: String!
}

input NewLoftNewMember {
  loftName: String!
  memberName: String!
}

type Mutation {
  createTask(input: NewTask!): Task!
  createEvent(input: NewEvent!): Event!
  createRequest(input: NewRequest!): JoinRequest!
  createLoft(input: NewLoft!): Loft!  # TODO: probably different for production
  createLoftAndMember(input: NewLoftNewMember): LoftAndFirstMember!
}