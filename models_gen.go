// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package loft

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/gofrs/uuid"
	"github.com/louistsaitszho/loft/models"
)

type Echo struct {
	Time   string `json:"time"`
	Format string `json:"format"`
}

type JoinRequest struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	Message   string    `json:"message"`
	CreatedAt time.Time `json:"createdAt"`
}

type LoftAndFirstMember struct {
	Loft        models.Loft   `json:"loft"`
	FirstMember models.Member `json:"firstMember"`
}

type NewEvent struct {
	Name   string    `json:"name"`
	LoftID uuid.UUID `json:"loftId"`
}

type NewLoft struct {
	Name string `json:"name"`
}

type NewLoftNewMember struct {
	LoftName   string `json:"loftName"`
	MemberName string `json:"memberName"`
}

type NewRequest struct {
	Name    string    `json:"name"`
	Message string    `json:"message"`
	LoftID  uuid.UUID `json:"loftId"`
}

type NewTask struct {
	Title  string    `json:"title"`
	LoftID uuid.UUID `json:"loftId"`
}

type Note struct {
	ID        uuid.UUID     `json:"id"`
	Creator   models.Member `json:"creator"`
	CreatedAt time.Time     `json:"createdAt"`
	Format    NoteFormat    `json:"format"`
	Content   string        `json:"content"`
}

type NoteFormat string

const (
	NoteFormatCommonMark NoteFormat = "COMMON_MARK"
)

func (e NoteFormat) IsValid() bool {
	switch e {
	case NoteFormatCommonMark:
		return true
	}
	return false
}

func (e NoteFormat) String() string {
	return string(e)
}

func (e *NoteFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NoteFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NoteFormat", str)
	}
	return nil
}

func (e NoteFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
