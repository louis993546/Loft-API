// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package loft

import (
	"fmt"
	"io"
	"strconv"
)

type Echo struct {
	Time   string `json:"time"`
	Format string `json:"format"`
}

type Event struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Loft struct {
	ID       string    `json:"id"`
	Name     string    `json:"name"`
	Members  []Member  `json:"members"`
	Tasks    []Task    `json:"tasks"`
	Events   []Event   `json:"events"`
	Requests []Request `json:"requests"`
}

type Member struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type NewEvent struct {
	Name   string `json:"name"`
	LoftID string `json:"loftId"`
}

type NewLoft struct {
	Name string `json:"name"`
}

type NewRequest struct {
	Name    string `json:"name"`
	Message string `json:"message"`
	LoftID  string `json:"loftId"`
}

type NewTask struct {
	Title  string `json:"title"`
	LoftID string `json:"loftId"`
}

type Request struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Message string `json:"message"`
}

type Task struct {
	ID    string    `json:"id"`
	Title string    `json:"title"`
	State TaskState `json:"state"`
}

type TaskState string

const (
	TaskStateNotDone TaskState = "NOT_DONE"
	TaskStateDone    TaskState = "DONE"
)

func (e TaskState) IsValid() bool {
	switch e {
	case TaskStateNotDone, TaskStateDone:
		return true
	}
	return false
}

func (e TaskState) String() string {
	return string(e)
}

func (e *TaskState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TaskState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TaskState", str)
	}
	return nil
}

func (e TaskState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
