# https://editor.swagger.io/
openapi: 3.0.2
info:
  title: Loft API
  version: 1.0.0
  contact:
    name: Louis Tsai
    url: https://louistsaitszho.github.io
    email: tsaitszho@gmail.com
servers: 
  - url: TBC (Staging)
    description: Staging server, data cloned from production (PID removed) once a week
  - url: TBC (Production)
    description: Production server
paths:
  /echo:
    get:
      summary: Super simple endpoint to check if server is alive
      responses:
        200:
          description: Return received server time (like an actual echo, get it?)
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Echo'
#   /loft:
#     post:
#       summary: Create a new loft
#       requestBody:
#         description: Data that's needed to create a new loft
#         content:
#           application/json:
#             schema:
#               type: object
#               properties: 
#                 user_name:
#                   type: string
#                 loft_name:
#                   type: string
#       responses:
#         200:
#           description: Create a new loft successful, and return loft and user info
#           content:
#             application/json:
#                 schema:
#                   type: object
#                   properties:
#                     loft:
#                       type: object
#                       properties:
#                         id:
#                           type: string
#                         name:
#                           type: string
#                     user:
#                       type: object
#   /loft/{loftId}:
#     get:
#       summary: Get information of a loft
#       responses:
#         200:
#           description: Fetch loft information successfully
#           content:
#             application/json:
#               $ref: '#/components/schemas/Loft'
#         401:
#           description: Authentication not found (i.e. don't even know who you are)
#         403:
#           description: Not authorize (i.e. I know who you are and that's why you're not allow)
#         404:
#           description: Loft not found
#     patch:
#       summary: Update information about a loft
#       responses:
#         200:
#           description: Patch loft information successfully
#         401:
#           description: Authentication not found (i.e. don't even know who you are)
#         403:
#           description: Not authorize (i.e. I know who you are and that's why you're not allow)
#         404:
#           description: Loft not found
#   /loft/{loftId}/requests:
#     post:
#       summary: Create a new request to join to a loft
#       responses:
#         200:
#           description: Request has been stored successfully and will be dispatch
#         404:
#           description: Loft not found
#     get:
#       summary: Get all the requests to join a loft
#       responses:
#         200:
#         401:
#         403:
#         404:
#   /loft/{loftId}/notes:
#     get:
#       summary: Get all notes of a loft
#       responses:
#         200:
#         401:
#         403:
#         404:
#     post:
#       summary: Create a new note in a loft
#   /loft/{loftId}/notes/{noteId}:
#     get:
#       summary: Get a specific note in a loft
#       responses:
#         200:
#         401:
#         403:
#         404:
#           summary: Cannot find the loft or the note
#     patch:
#       summary: Update fields in a specific note in a loft
#       responses:
        
#   /loft/{loftId}/tasks:
#     get:
#       summary: Get all tasks of a loft
#     post:
#       summary: Create a new task in a loft
#   /loft/{loftId}/tasks/{taskId}:
#     get:
#       summary: Get a specific task in a loft
#     patch:
#       summary: Update fields in a specific task in a loft
#   /loft/{loftId}/members:
#     get:
#       summary: Get all members of a loft
#   /loft/{loftId}/members/{memberId}:
#     get: Get information of a member in a loft
components:
  schemas:
    Echo:
      type: object
      properties:
        data:
          type: object
          properties:
            received_time:
              type: string
              format: date-time
    Item not found:
      type: object
      description: When an item cannot be found, this body should be able to help you get a better idea on what goes wrong
      properties:
        error:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              status:
                type: string
                default: '404'
              title:
                type: string
              code:
                type: string
                enum: [
                  404_LOFT_NOT_FOUND,
                  404_NOTE_NOT_FOUND,
                  404_TASK_NOT_FOUND,
                  404_EVENT_NOT_FOUND,
                  404_MEMBER_NOT_FOUND
                ]
    Item gone:
      type: object
      description: When client is trying to delete an item that is no longer available
      properties:
        error:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              status:
                type: string
                default: '410'
              title:
                type: string
              code:
                type: string
                enum: [
                  410_LOFT_GONE,
                  410_TASK_GONE,
                  410_NOTE_GONE,
                  410_EVENT_GONE,
                  410_MEMBER_GONE
                ]
    POST notes request:
      
#     New Loft Request:
#       type: object
#       properties:
#         loft_name:
#           type: string
#         member_name:
#           type: string
#     Join Loft Request:
#       type: object
#       properties:
#         loft_id:
#           type: string
#           format: uuid
#         name:
#           type: string
#         message:
#           type: string
#     Loft:
#       type: object
#       properties:
#         name:
#           type: string
#         id:
#           type: string
#           format: uuid
#         join_code:
#           type: string
#     Member:
#       type: object
#       properties:
#         name:
#           type: string
#         id:
#           type: string
#           format: uuid
#     Note:
#       type: object
#       properties:
#         id:
#           type: string
#           format: uuid
#     Task:
#       type: object
#       properties:
#         id:
#           type: string
#           format: uuid
externalDocs:
  description: API GitHub Repository
  url: https://github.com/louistsaitszho/loft-API